<?xml version="1.0"?>
<stylesheet id="stylkZ0vFyd3hmCg" lang="any" name="core-xsl" show-in="main" webpalschematype="wpAppStylesheet"><![CDATA[<?xml version="1.0"?>
<!DOCTYPE xsl:stylesheet [
<!ENTITY nbsp "&#160;" >
]>

<!-- (c) 2001-present All Copyrights Palomino Inc.
This code is for use within web applications powered by WebPal Cloud Server ONLY.
Use in other Content Management Applications is not permitted.
Modification of the code below is permitted and encouraged, at your own risk.
-->

<xsl:stylesheet version="1.0"
                exclude-result-prefixes="wp php fn xsl"
                xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns:php="http://php.net/xsl"
                xmlns:wp="http://www.palominosys.com/wp"
                xmlns:fn="http://www.w3.org/2005/xpath-functions"
                >

  <!-- ====================================================================
       == VARIABLES, DIRECTIVES and OVERRIDES
       global-scope variables as well as any overriding template definitions
       will be injected here by WebPal::createXSL()
       ==================================================================== -->

  <xsl:variable name="WEB" select="/web" />
  <xsl:variable name="NODE" select="php:function('WPXSL::getGlobal', 'NODE')"/>
  <xsl:variable name="COMMON" select="/web/pages/page[@name='common-content']" />


  <!-- ====================================================================
       == TEMPLATE: /
       main entry point. by default, XSL processes the input with the
       current node being the root document element. The default template
       simply calls a named template (macro). This template is low priority
       can be overriden.
       ==================================================================== -->

  <xsl:template match="/" priority="0.1">
    <xsl:call-template name="webpalcore-start-default"/>
  </xsl:template>

  <!-- ====================================================================
       == MACRO: webpalcore-start-default
       the default behaviour is to switch context to the $NODE element
       which is selected by WebPal::transformNodes(), and apply templates
       in 'page-template' mode. Technically $NODE is a node-set, but usually
       contains only one element.
       ==================================================================== -->

  <xsl:template name="webpalcore-start-default">
    <xsl:if test="$NODE">
      <xsl:for-each select="$NODE">
        <xsl:apply-templates select="." mode="page-template"/>
      </xsl:for-each>
    </xsl:if>
  </xsl:template>

  <xsl:template match="web" mode="meta">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <meta http-equiv="Author" content="{/web/author}"/>
    <meta http-equiv="GENERATOR" content="WebPal Cloud Server - webpal.net"/>
    <meta http-equiv="Classification" content="{/web/classification}"/>
    <meta http-equiv="keywords" content="{/web/keywords}"/>
  </xsl:template>




  <!-- ============== default extension behaviour - do nothing ================ -->

  <xsl:template match="extension"/>

  <!-- ============== including resource links supplied by the extensions ================ -->

  <xsl:template name="include-extension-styles">
    <xsl:comment> === Extension Styles === </xsl:comment>
    <xsl:for-each select="/web/extensions/extension/resource-links/resource-link[@type='css']">
      <xsl:variable name="link" select="@link"/>
      <xsl:variable name="first" select="/web/extensions/extension/resource-links/resource-link[@type='css'][@link=$link][1]"/>

      <xsl:if test="generate-id(.)=generate-id($first)">
        <xsl:comment><xsl:value-of select="@link"/></xsl:comment>
        <xsl:choose>
          <xsl:when test="substring(@link, 1, 1) = '/' or substring(@link, 1, 4) = 'http' ">
            <link rel="stylesheet" href="{@link}" />
          </xsl:when>
          <xsl:otherwise>
            <link rel="stylesheet" href="/resource/ext/{php:function('WPXSL::camelBack', ../../@name)}/{@link}" />
          </xsl:otherwise>
        </xsl:choose>
      </xsl:if>
    </xsl:for-each>
    <xsl:for-each select="/web/extensions/extension/resource-links/resource-link[@type='alternate css']">
      <link rel="alternate stylesheet" href="/resource/ext/{php:function('WPXSL::camelBack', ../../@name)}/{@link}" />
    </xsl:for-each>
    [[WebPal::includeExtensionCSS() ]]
  </xsl:template>

  <xsl:template name="include-extension-scripts">
    <section>
      <xsl:for-each select="/web/extensions/extension/resource-links/resource-link[@type='javascript']">
        <xsl:variable name="link" select="@link"/>
        <xsl:variable name="first" select="/web/extensions/extension/resource-links/resource-link[@type='javascript'][@link=$link][1]"/>

        <xsl:if test="generate-id(.)=generate-id($first)">
          <xsl:comment><xsl:value-of select="@link"/></xsl:comment>
          <xsl:choose>
            <xsl:when test="substring(@link, 1, 1) = '/' or substring(@link, 1, 4) = 'http' ">
              <script type="text/javascript" src="{@link}"></script>
            </xsl:when>
            <xsl:otherwise>
              <script type="text/javascript" src="/resource/ext/{php:function('WPXSL::camelBack', ../../@name)}/{@link}"></script>
            </xsl:otherwise>
          </xsl:choose>
        </xsl:if>
        <xsl:text>
        </xsl:text>
      </xsl:for-each>
      [[ WebPal::includeExtensionScripts() ]]
    </section>
  </xsl:template>

  <!-- some convenience functions to help with typos-->

  <xsl:template name="include-script">
    <xsl:call-template name="include-extension-scripts"/>
    <xsl:call-template name="include-custom-scripts"/>
  </xsl:template>
  <xsl:template name="include-scripts">
    <xsl:call-template name="include-extension-scripts"/>
    <xsl:call-template name="include-custom-scripts"/>
  </xsl:template>
  <xsl:template name="include-style">
    <xsl:call-template name="include-extension-styles"/>
    <xsl:call-template name="include-custom-styles"/>
  </xsl:template>
  <xsl:template name="include-styles">
    <xsl:call-template name="include-extension-styles"/>
    <xsl:call-template name="include-custom-styles"/>
  </xsl:template>

  <!-- default element behaviour: render nothing -->
  <xsl:template match="*" priority="0.0"/>

  <!-- default text behaviour: render all -->
  <xsl:template match="text()" priority="0.0"><xsl:value-of select="."/></xsl:template>

  <!-- ============== Include content from common content ================ -->

  <xsl:template name="include-content-item">
    <xsl:param name="item-name" />
    <xsl:param name="default" />

    <xsl:if test="not(/web/pages/page[@name='common-content']//*[@name=$item-name])">
      <xsl:copy-of select="$default"/>
    </xsl:if>

    <xsl:if test="/web/pages/page[@name='common-content']//*[@name=$item-name]">
      <xsl:apply-templates select="/web/pages/page[@name='common-content']//*[@name=$item-name]" mode="html"/>
    </xsl:if>
  </xsl:template>

  <!-- ============================================================ -->

  <xsl:template name="error-template">
    <xsl:param name="content" />
    <xsl:copy-of select="$content"/>
  </xsl:template>

  <xsl:template name="default-template">
    <xsl:param name="content" select="'Sample Content'"/>
    <html>
      <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
        <meta cname="charset" content="utf-8"/>
        <title><xsl:value-of select="/web/title"/></title>
      </head>
      <body>
        <xsl:copy-of select="$content/page/content"/>
      </body>
    </html>
  </xsl:template>

  <!-- ====================================================================================================== -->

  <xsl:template name="page-content">
    <div class="page-content">
      <xsl:call-template name="render-content"/>
    </div>
  </xsl:template>

  <!-- ====================================================================================================== -->

  <xsl:template name="render-content">
    <xsl:param name="show-in" select="'main'" />
    <xsl:choose>
      <xsl:when test="name()='page-view'">
        <xsl:apply-templates select=".//*[@show-in=$show-in]" mode="html">
          <xsl:with-param name="show-in" select="$show-in"/>
        </xsl:apply-templates>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select=".">
          <xsl:with-param name="show-in" select="$show-in"/>
        </xsl:apply-templates>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="find-content">
    <xsl:param name="name" select="'main'" />
    <xsl:choose>
      <xsl:when test="*[@name=$name] | *[@show-in=$name]">
        <xsl:apply-templates select="*[@name=$name] | *[@show-in=$name]"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="//page[@name='common-content']/*[@name=$name]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template name="render-design-element">
    <xsl:param name="element" />
    <xsl:copy-of select="$element"/>
  </xsl:template>

  <xsl:template name="list-subpages">
    <xsl:param name="page"/>
    <xsl:param name="levels" select="1"/>
    <xsl:param name="path" select="''"/>
    <xsl:choose>
      <xsl:when test="$levels &gt; 0">
        <xsl:for-each select="$page">
          <ul>
            <xsl:for-each select="page[@show-in-menu='yes']">
              <li>
                <a href="{$path}/{@name}"><xsl:value-of select="shorttitle[1]"/></a>
                <xsl:call-template name="list-subpages">
                  <xsl:with-param name="page" select="."/>
                  <xsl:with-param name="levels" select="$levels - 1"/>
                  <xsl:with-param name="path" select="$path"/>
                </xsl:call-template>
              </li>
            </xsl:for-each>
          </ul>
        </xsl:for-each>
      </xsl:when>
      <xsl:otherwise>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>


  <xsl:template name="nav-subpages">
    <xsl:param name="page"/>
    <xsl:param name="levels" select="2"/>
    <xsl:param name="level" select="1"/>
    <xsl:param name="path" select="''"/>
    <xsl:choose>
      <xsl:when test="$level &lt;= $levels">
        <xsl:for-each select="$page[1]">
          <div class="L{$level}">
            <xsl:for-each select="page[@show-in-menu='yes']">
              <div class="L{$level}item" style="width:100%;" id="item_{@id}"
                   onmouseover="div_hover('{@id}');"
                   onmouseout="div_out('{@id}');"
                   onclick="div_onclick('{@id}', '{$path}/{@name}');"
                   >
                <a href="{$path}/{@name}"><xsl:value-of select="shorttitle[1]"/></a>
                <xsl:call-template name="nav-subpages">
                  <xsl:with-param name="page" select="."/>
                  <xsl:with-param name="levels" select="$levels"/>
                  <xsl:with-param name="level" select="$level + 1"/>
                  <xsl:with-param name="path" select="$path"/>
                </xsl:call-template>
              </div>
            </xsl:for-each>
            <xsl:choose>
              <xsl:when test="$level = 1">
                <div class="L{$level}item" id="item_returnPrevious" onmouseover="div_hover('returnPrevious');" onmouseout="div_out('returnPrevious');" onclick="div_onclick('returnPrevious','..')">
                  <a href="..">Return to Previous</a>
                </div>
              </xsl:when>
            </xsl:choose>
          </div>
        </xsl:for-each>
      </xsl:when>
      <xsl:otherwise>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>



  <xsl:template name="php-include">
    <xsl:param name="url" />
    <xsl:param name="get-params" />
    <xsl:text disable-output-escaping="yes">&lt;?</xsl:text>
    <xsl:for-each select="$get-params/param">
      $_GET['<xsl:value-of select="@name"/>'] = '<xsl:value-of select="@value"/>';
    </xsl:for-each>
    @include('<xsl:value-of select="$url"/>');
    <xsl:text disable-output-escaping="yes">?&gt;</xsl:text>
  </xsl:template>


  <!-- all nodes inside pages are handled here -->

  <xsl:template match="page">
    <xsl:param name="show-in" select="'main'"/>
    <xsl:choose>
      <xsl:when test="$show-in = 'main'">
        <xsl:apply-templates select="*[@show-in='main' or not(@show-in) or @show-in=''][name(.) != 'page']"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="*[@show-in = $show-in]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="page" mode="page">
    <xsl:param name="show-in" select="'main'"/>
    <xsl:choose>
      <xsl:when test="$show-in = 'main'">
        <xsl:apply-templates select="*[@show-in='main' or not(@show-in) or @show-in=''][name(.) != 'page']"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="*[@show-in = $show-in]"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>



  <xsl:template match="page/title" mode="head">
    <title><xsl:value-of select="ancestor::web/title"/> - <xsl:value-of select="."/></title>
  </xsl:template>

  <xsl:template match="page/title | page/shorttitle">
  </xsl:template>

  <!-- ==================================================================== -->

  <xsl:template match="banner" mode="design">
    <xsl:choose>
      <xsl:when test="@link and @link != ''">
        <a>
          <xsl:attribute name="href"><xsl:value-of select="@link"/></xsl:attribute>
          <xsl:attribute name="target">
            <xsl:choose>
              <xsl:when test="@open-new-window = 'yes'">_blank</xsl:when>
              <xsl:otherwise>_top</xsl:otherwise>
            </xsl:choose>
          </xsl:attribute>
          <xsl:call-template name="insert-banner-image"/>
        </a>
      </xsl:when>
      <xsl:otherwise>
        <xsl:call-template name="insert-banner-image"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>



  <xsl:template name="insert-banner-image">
    <xsl:variable name="width" select="./banner-image/@width"/>
    <xsl:variable name="height" select="./banner-image/@height"/>
    <xsl:variable name="src">
      <xsl:choose>
        <xsl:when test="contains(./banner-image/@src,'http://')">
          <xsl:value-of select="./banner-image/@src"/>
        </xsl:when>
        <xsl:when test="substring(@src, 1, 1) = '/' ">
          <xsl:value-of select="./banner-image/@src"/>
        </xsl:when>
        <xsl:when test="contains(./banner-image/@src, '_ajax/')">
          <xsl:value-of select="./banner-image/@src"/>
        </xsl:when>
        <xsl:otherwise>/resource/dm/<xsl:value-of select="@data-file-id"/></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:element name="img">
      <xsl:copy-of select="@*[name() != 'src'][name() != 'style']"/>
      <xsl:attribute name="src"><xsl:value-of select="$src"/></xsl:attribute>
      <xsl:attribute name="style"><xsl:value-of select="./banner-image/@style"/>;height:<xsl:value-of select="$height"/>px;width:<xsl:value-of select="$width"/>px;</xsl:attribute>
      <xsl:attribute name="alt">
        <xsl:value-of select="@alt"/>
      </xsl:attribute>
      <xsl:attribute name="id">
        <xsl:value-of select="@id"/>
      </xsl:attribute>
      <xsl:if test="./rollover-image/@src">
        <xsl:attribute name="srcover">
          <xsl:value-of select="image/@src"/>
        </xsl:attribute>
      </xsl:if>
    </xsl:element>
  </xsl:template>

  <!-- ==================================================================== -->

  <xsl:template match="image" mode="design">
    <xsl:comment>image</xsl:comment>
    <xsl:variable name="src">
      <xsl:choose>
        <xsl:when test="contains(@src,'http://')">
          <xsl:value-of select="@src"/>
        </xsl:when>
        <xsl:when test="substring(@src, 1, 1) = '/' ">
          <xsl:value-of select="@src"/>
        </xsl:when>
        <xsl:when test="contains(@src, '_ajax/')">
          <xsl:value-of select="@src"/>
        </xsl:when>
        <xsl:otherwise>/resource/dm/<xsl:value-of select="@data-file-id"/></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:element name="img">
      <xsl:copy-of select="@*[name() != 'src'][name() != 'style']"/>
      <xsl:attribute name="src"><xsl:value-of select="$src"/></xsl:attribute>
      <xsl:attribute name="style">vertical-align:top;<xsl:value-of select="@style"/>;height:<xsl:value-of select="@height"/>px;width:<xsl:value-of select="@width"/>px;</xsl:attribute>
    </xsl:element>
  </xsl:template>

  <!-- ==================================================================== -->

  <xsl:template match="rotating-ads" mode="design">
    <xsl:variable name="database" select="@database-name"/>
    <div data-debug-database="{$database}"> </div>

    <xsl:for-each select="/web/databases/advertising-list/banners[@name=$database]/banner-image">
      <xsl:variable name="src" select="@src" />
      <img src="/resource/ext/{$src}">
        <xsl:attribute name="style"><xsl:if test="position()>1">display:none;</xsl:if> </xsl:attribute>
      </img>
    </xsl:for-each>
  </xsl:template>



  <!-- **** html.xsl -->
  <!-- ==================================================================== -->

  <xsl:template match="form-view[@model and @model!='']">
    {{ Form::model(<xsl:value-of select="@model"/>
    <xsl:if test="@url!=''">, [ 'url' <xsl:text disable-output-escaping="yes">=></xsl:text> '<xsl:value-of select="@url"/>' ]</xsl:if>) }}
    <xsl:apply-templates select="*" mode="html"/>
    {{ Form::close() }}
  </xsl:template>

  <xsl:template match="page/form-view"  priority="0.0">
    {{ Form::open( <xsl:if test="@url!=''"> [ 'url' <xsl:text disable-output-escaping="yes">=></xsl:text> '<xsl:value-of select="@url"/>' ]</xsl:if>) }}
    <xsl:apply-templates select="*" mode="html"/>
    {{ Form::close() }}
  </xsl:template>

  <xsl:template match="page/form-view//input[@type='text'][@data-model]" mode="html">
    {{ Form::text('<xsl:value-of select="@data-model"/>', null, [ 'id' <xsl:text disable-output-escaping="yes">=></xsl:text> '<xsl:value-of select="@name"/>' ]) }}
  </xsl:template>

  <xsl:template match="html-code" mode="html" >
    <xsl:value-of select="node()" disable-output-escaping="yes"/>
  </xsl:template>

  <xsl:template match="page-view//html-code">
    <xsl:value-of select="node()" disable-output-escaping="yes"/>
  </xsl:template>

  <xsl:template match="form-view//html-code">
    <xsl:value-of select="node()" disable-output-escaping="yes"/>
  </xsl:template>


  <xsl:template match="page//html-code">
    <xsl:value-of select="node()" disable-output-escaping="yes"/>
  </xsl:template>


  <xsl:template match="page//form-view//html-code">
    <xsl:value-of select="node()" disable-output-escaping="yes"/>
  </xsl:template>

  <xsl:template match="page//html-code-anchor">
    <xsl:value-of select="node()" disable-output-escaping="yes"/>
  </xsl:template>

  <xsl:template match="page//code-view[@webpalschematype='wpAppFormCode']">
    <xsl:value-of select="node()" disable-output-escaping="yes"/>
  </xsl:template>

  <xsl:template match="custom-functions">
    <xsl:text disable-output-escaping="yes"><![CDATA[
    <?php
    ]]]]><![CDATA[></xsl:text>
    <xsl:value-of select="./text()" disable-output-escaping="yes"/>
    <xsl:text disable-output-escaping="yes"><![CDATA[
    ?>
    ]]]]><![CDATA[></xsl:text>
  </xsl:template>

  <xsl:template match="pre-save-code">
    <xsl:comment>php pre-save-code code elided</xsl:comment>
  </xsl:template>

  <xsl:template match="post-save-code">
    <xsl:comment>php post-save-code code elided</xsl:comment>
  </xsl:template>

  <xsl:template match="validation-code">
    <xsl:comment>php validation-save-code code elided</xsl:comment>
  </xsl:template>

  <xsl:template match="startup-code">
    <xsl:comment>php startup-code elided</xsl:comment>
  </xsl:template>

  <xsl:template match="on-update">
    <xsl:comment>php on-update elided</xsl:comment>
  </xsl:template>

  <xsl:template match="custom-functions">
    <xsl:comment>php custom-functions elided</xsl:comment>
  </xsl:template>

  <xsl:template match="is-visible">
    <xsl:comment>php is-visible elided</xsl:comment>
  </xsl:template>


  <xsl:template match="*[@webpalschematype='wpHTMLForm']">
    <xsl:variable name="pattern"
                  select="php:function('WPXSL::request_param', 'ddd')"/>
    <xsl:variable name="command"
                  select="php:function('WPXSL::request_param', 'command')"/>
    <xsl:variable name="webname"
                  select="php:function('WPXSL::webname')"/>


    <xsl:choose>
      <xsl:when test="$command = 'Search'">
        <xsl:variable name="results"
                      select="php:function('WPXSL::solrSearch', $webname, $pattern)"/>
        <xsl:apply-templates select="$results" mode="searchResults"/>
      </xsl:when>

      <xsl:otherwise>
        <form method="POST">
          <xsl:if test="./@name">
            <xsl:attribute name="name"><xsl:value-of select="./@name"/></xsl:attribute>
          </xsl:if>
          <input type="hidden" name="_action" value="form"/>
          <xsl:if test="./@name">
            <input type="hidden" name="_form">
              <xsl:attribute name="value"><xsl:value-of select="./@name"/></xsl:attribute>
            </input>
          </xsl:if>
          <xsl:apply-templates select="node()" mode="html"/>
        </form>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="response" mode="searchResults">
    <xsl:apply-templates  select="result" mode="searchResults"/>
  </xsl:template>

  <xsl:template match="result" mode="searchResults">
    <xsl:apply-templates select="doc" mode="searchResults"/>
  </xsl:template>

  <xsl:template match="doc" mode="searchResults">
    <xsl:variable name="id" select="./str[@name='id']/text()"/>
    <xsl:variable name="dom" select="php:function('WPXSL::getGlobal', 'WEB')"/>
    <xsl:variable name="page" select="$dom//*[@id=$id]"/>
    <xsl:variable name="path" select="php:function('WPXSL::nodePath', $page)"/>
    <div>
      <a>
        <xsl:attribute name="href">/<xsl:value-of select="$path"/></xsl:attribute>
        <xsl:value-of select="./arr[@name='title']/str/text()"/>
      </a>
    </div>
  </xsl:template>

  <xsl:template match="*[@webpalschematype='wpSearchForm']">
    <form method="POST">
      <xsl:variable name="ddd"
                    select="php:function('WPXSL::request_param', 'search')"/>
      <xsl:variable name="command"
                    select="php:function('WPXSL::request_param', 'command')"/>
      <xsl:variable name="webname"
                    select="php:function('WPXSL::webname')"/>

      <xsl:if test="./@name">
        <xsl:attribute name="name"><xsl:value-of select="./@name"/></xsl:attribute>
      </xsl:if>
      <input type="hidden" name="_action" value="form"/>
      <xsl:if test="./@name">
        <input type="hidden" name="_form">
          <xsl:attribute name="value"><xsl:value-of select="./@name"/></xsl:attribute>
        </input>
      </xsl:if>

      <xsl:apply-templates select="node()" mode="html"/>
      <xsl:variable name="search"
                    select="php:function('WPXSL::solrSearch', $pattern)"/>
      <xsl:apply-templates select="$search" mode="searchResults"/>

    </form>
  </xsl:template>


  <xsl:template match="html | text | code | *[@webpalschematype='wpHtml']">
    <div class="wpHtml">
      <xsl:choose>
        <xsl:when test="./@columns != 'none'">
          <xsl:variable name="cols" select="./@columns"/>
          <!-- added by PK. requires the columnizer jquery plugin by wulf -->
          <!-- need to modify wpHtml in global.xsd to have a 'column' attribute -->
          <!-- inside {web}/theme/default/js in the dm -->
          <div class="columnize" data-cols="{$cols}">
            <xsl:apply-templates select="node()" mode="html"/>
          </div>
          <script type="text/javascript">
            $(document).ready(function () {
            <xsl:text disable-output-escaping="yes">
              if (window.jQuery &amp;&amp; $.fn.columnize) {
            </xsl:text>
            var col_div = $('.columnize'), nCols = $('.columnize').attr('data-cols');
            col_div.columnize({ columns: nCols});
            }
            });
          </script>
        </xsl:when>
        <xsl:otherwise>
          <xsl:apply-templates select="node()" mode="html"/>
        </xsl:otherwise>
      </xsl:choose>
    </div>
  </xsl:template>

  <xsl:template match="*" mode="html">
    <xsl:element name="{name(.)}">
      <xsl:copy-of select="@*"/>
      <xsl:apply-templates select="node()" mode="html"/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="span[@class='iframe-tab']" mode="html">
    <!-- skip -->
  </xsl:template>



  <xsl:template match="iframe[@class='webpal_video']" mode="html">
    <iframe src="{@src}" height="{@height}" width="{@width}" style="border:none;"/>
  </xsl:template>

  <xsl:template match="iframe[@class='webpal_videoautoplayloop']" mode="html">
    <xsl:variable name="mode" select="php:function('WPXSL::getGlobal', 'MODE')"/>
    <xsl:comment>Autoplay video <xsl:value-of select="$mode"/></xsl:comment>
    <xsl:choose>
      <xsl:when test="$mode = 'preview'">
        <!-- no autoplay when preview mode -->
        <iframe style="border:none;">
          <xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
          <xsl:attribute name="src"><xsl:value-of select="@src"/></xsl:attribute>
          <xsl:attribute name="height"><xsl:value-of select="@height"/></xsl:attribute>
          <xsl:attribute name="width"><xsl:value-of select="@width"/></xsl:attribute>
        </iframe>
      </xsl:when>
      <xsl:otherwise>
        <!-- autoplay when not preview mode -->
        <iframe style="border:none;">
          <xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
          <xsl:attribute name="src"><xsl:value-of select="@src"/>&amp;autoplay=1</xsl:attribute>
          <xsl:attribute name="height"><xsl:value-of select="@height"/></xsl:attribute>
          <xsl:attribute name="width"><xsl:value-of select="@width"/></xsl:attribute>
        </iframe>
      </xsl:otherwise>
    </xsl:choose>

  </xsl:template>

  <xsl:template match="iframe[@class='webpal_videoautoplay']" mode="html">
    <xsl:variable name="mode" select="php:function('WPXSL::getGlobal', 'MODE')"/>
    <xsl:comment>Autoplay video <xsl:value-of select="$mode"/></xsl:comment>
    <xsl:choose>
      <xsl:when test="$mode = 'preview'">
        <!-- no autoplay when preview mode -->
        <iframe style="border:none;">
          <xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
          <xsl:attribute name="src"><xsl:value-of select="@src"/></xsl:attribute>
          <xsl:attribute name="height"><xsl:value-of select="@height"/></xsl:attribute>
          <xsl:attribute name="width"><xsl:value-of select="@width"/></xsl:attribute>
        </iframe>
      </xsl:when>
      <xsl:otherwise>
        <!-- autoplay when not preview mode -->
        <iframe style="border:none;">
          <xsl:attribute name="class"><xsl:value-of select="@class"/></xsl:attribute>
          <xsl:attribute name="src"><xsl:value-of select="@src"/>?autoplay=1</xsl:attribute>
          <xsl:attribute name="height"><xsl:value-of select="@height"/></xsl:attribute>
          <xsl:attribute name="width"><xsl:value-of select="@width"/></xsl:attribute>
        </iframe>
      </xsl:otherwise>
    </xsl:choose>

  </xsl:template>

  <xsl:template match="iframe[@class='webpal_videonoplay']" mode="html">
    <xsl:comment>No Auto Play Video</xsl:comment>
    <iframe src="{@src}" height="{@height}" width="{@width}" style="border:none;"/>
  </xsl:template>


  <xsl:template match="html-code" mode="html">
    <xsl:value-of select="text()" disable-output-escaping="yes"/>
  </xsl:template>

  <xsl:template match="html-code-anchor" mode="html">
    <xsl:value-of select="node()" disable-output-escaping="yes"/>
  </xsl:template>

  <xsl:template match="p" mode="html">
    <xsl:element name="{name()}">
      <xsl:copy-of select="@*"/>
      <xsl:attribute name="class">standard</xsl:attribute>
      <xsl:apply-templates select="node()" mode="html"/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="ch[@value='nbsp']" mode="html">&#160;</xsl:template>

  <xsl:template match="span[@style='display:none;']"></xsl:template>

  <xsl:template match="p[count(node())=1][ch] | p[count(node())=1][br]" mode="html">
    <xsl:element name="p">
      <xsl:attribute name="style">clear:both</xsl:attribute>
    </xsl:element>
  </xsl:template>

  <xsl:template match="html/*[1]" mode="html">
    <xsl:element name="{name()}">
      <xsl:copy-of select="@*"/>
      <xsl:apply-templates mode="html"/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="img" mode="html">
    <xsl:variable name="width">
      <xsl:choose>
        <xsl:when test="@width">
          width:<xsl:value-of select="@width"/>px;
        </xsl:when>
        <xsl:otherwise></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="height">
      <xsl:choose>
        <xsl:when test="@height">
          height:<xsl:value-of select="@height"/>px;
        </xsl:when>
        <xsl:otherwise></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="resize">
      <xsl:choose>
        <xsl:when test="@height and @width"><xsl:value-of select="@width"/>x<xsl:value-of select="@height"/>!</xsl:when>
        <xsl:when test="@width"><xsl:value-of select="@width"/>x</xsl:when>
        <xsl:when test="@height">x<xsl:value-of select="@height"/></xsl:when>
        <xsl:otherwise></xsl:otherwise>
      </xsl:choose>
    </xsl:variable>

    <xsl:variable name="src">
      <xsl:choose>
        <xsl:when test="contains(@src,'http://')">
          <xsl:value-of select="@src"/>
        </xsl:when>
        <xsl:when test="substring(@src, 1, 1) = '/' ">
          <xsl:value-of select="@src"/>
        </xsl:when>
        <xsl:when test="contains(@src, '_ajax/')">
          <xsl:value-of select="@src"/>
        </xsl:when>
        <xsl:otherwise>/resource/dm/<xsl:value-of select="@src"/>/resize=<xsl:value-of select="$resize"/></xsl:otherwise>

      </xsl:choose>
    </xsl:variable>

    <xsl:element name="img">
      <xsl:copy-of select="@*[name() != 'src'][name() != 'style'][name() != 'width'][name() != 'height']"/>
      <xsl:attribute name="class">
        <xsl:if test="name(..)='p' and count(../node())=1">img-responsive</xsl:if>
      </xsl:attribute>
      <xsl:attribute name="src"><xsl:value-of select="$src"/></xsl:attribute>
      <xsl:attribute name="style"><xsl:value-of select="@style"/>;<xsl:value-of select="$height"/><xsl:value-of select="$width"/></xsl:attribute>
    </xsl:element>
  </xsl:template>

  <xsl:template match="a" mode="html">
    <xsl:variable name="linkclass" select="'link'"/>
    <xsl:choose>
      <xsl:when test="@data-file-id">
        <a href="/resource/dm/{@data-file-id}" target="{@target}" name="{@name}" class="{$linkclass}">
          <xsl:apply-templates mode="html"/>
        </a>
      </xsl:when>
      <xsl:when test="substring(@href, 1, 7) = 'chapter'">
        <xsl:variable name="path" select="php:function('WPXSL::getPath', @href)"/>
        <a href="{$path}" target="{@target}" name="{@name}" class="{$linkclass}">
          <xsl:apply-templates mode="html"/>
        </a>
      </xsl:when>
      <xsl:otherwise>
        <a href="{@href}" target="{@target}" name="{@name}" class="{$linkclass}">
          <xsl:apply-templates mode="html"/>
        </a>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="ch" mode="html">
    <xsl:text></xsl:text><xsl:text disable-output-escaping="yes">&amp;</xsl:text><xsl:value-of select="@value"/>;<xsl:text></xsl:text>
  </xsl:template>


  <xsl:template match="li/p"  mode="html">
    <xsl:apply-templates mode="html"/>
  </xsl:template>

  <xsl:template match="font[not(@*)]"  mode="html">
    <xsl:apply-templates mode="html"/>
  </xsl:template>

  <xsl:template match="wpspan"  mode="html">
    <xsl:variable name="span-style" select="./@style"/>
    <xsl:element name="span">
      <xsl:attribute name="style">
        <xsl:value-of select="$span-style"/>
      </xsl:attribute>
      <xsl:apply-templates mode="html"/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="table" mode="html">
    <div class="table-responsive" style="position:relative;">
      <xsl:element name="{name()}">
        <xsl:attribute name="class" value="table"/>
        <xsl:copy-of select="@*"/>
        <xsl:apply-templates select="node()" mode="html"/>
      </xsl:element>
    </div>
  </xsl:template>

  <xsl:template match="tbody|tr|td|th|div" mode="html">
    <xsl:element name="{name()}">
      <xsl:copy-of select="@*"/>
      <xsl:apply-templates select="node()" mode="html"/>
    </xsl:element>
  </xsl:template>

  <xsl:template match="div[@data-webpal-node]" mode="html">
    <xsl:variable name="path" select="@data-webpal-node"/>
    <xsl:variable name="nodes"
                  select="php:function('WPXSL::findNode', $path)"/>
    <xsl:for-each select="$nodes">
      <xsl:apply-templates/>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="div[@data-webpal-node]">
    <xsl:variable name="path" select="@data-webpal-node"/>
    <xsl:variable name="nodes"
                  select="php:function('WPXSL::findNode', $path)"/>
    <xsl:for-each select="$nodes">
      <xsl:apply-templates/>
    </xsl:for-each>
  </xsl:template>

  <xsl:template match="/extract-content[@key]" mode="page-template" priority="9.0">
    <xsl:comment>EXTRACT CONTENT</xsl:comment>
    <div>
      <xsl:for-each select="*">
        <xsl:apply-templates mode="html"/>
      </xsl:for-each>
    </div>
  </xsl:template>

</xsl:stylesheet>

]]></stylesheet>
